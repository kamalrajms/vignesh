## hooks
usestate
useEffect
useContext
useReducer
useCallback
useRef
useNavigate
useParams

type of states

local states - Usestate , useReducer --inside one component

global state - useContext , Redux  -- Across a component

server state -useEffect ,React Query -- Remote data(API)

URL state-  useSearchParams ,useParams -- Routing info (Access address path)

Form state -  useState -- user input


## ROUTER DOM

npm install react-router-dom

<BrowserRouter>
    <Routes>
        <Route path={"/"} element={<Home/>}/>
        <Route path={"/about"} element={<About/>}/>
        <Route/>
        <Route/>
        <Route/>
    <Routes/>
<BrowserRouter/>



## useRef()

    it returns a mutable (able to change) values

    {current:value}

    Does not cause Re-renderinr when update

    useage:
        access DOM elements directly.
        Store multiple value that persist between renders without Re-rendering
        Update anytype of data.

    const variableName=useRef(initalValue)
    

## useReducer(){}

    const [state,dispatch]=useReducer(reducerFunction,initialState)

    state=current value
    dispatch(action)=a function to tell the reducer what to do
    reducer(state,action)= the logical that return a new state
    initial value =stsarting value


## useCallback()

    const variableName=useCallback(()=>{
        //code
    },[dependencies])

## useparams